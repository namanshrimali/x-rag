,id,question,answer,context,group_id,groups
0,0,"What values are specified to replaceNaN, positive infinity, and negative infinity values in input?","bynan,posinf, andneginf","ReplacesNaN, positive infinity, and negative infinity values in inputwith the values specified bynan,posinf, andneginf, respectively.
By default,NaN`sarereplacedwithzero,positiveinfinityisreplacedwiththegreatestfinitevaluerepresentableby:attr:`input’s dtype, and negative infinity
is replaced with the least finite value representable byinput’s dtype. input(Tensor) – the input tensor. nan(Number,optional) – the value to replaceNaNs with. Default is zero. ",141,"[0, 1, 2, 3]"
1,1,"By default,NaN is replaced with what value?",zero,"ReplacesNaN, positive infinity, and negative infinity values in inputwith the values specified bynan,posinf, andneginf, respectively.
By default,NaN`sarereplacedwithzero,positiveinfinityisreplacedwiththegreatestfinitevaluerepresentableby:attr:`input’s dtype, and negative infinity
is replaced with the least finite value representable byinput’s dtype. input(Tensor) – the input tensor. nan(Number,optional) – the value to replaceNaNs with. Default is zero. ",141,"[0, 1, 2, 3]"
2,2,What values are used to replace negative infinity values in input?,"bynan,posinf, andneginf","ReplacesNaN, positive infinity, and negative infinity values in inputwith the values specified bynan,posinf, andneginf, respectively.
By default,NaN`sarereplacedwithzero,positiveinfinityisreplacedwiththegreatestfinitevaluerepresentableby:attr:`input’s dtype, and negative infinity
is replaced with the least finite value representable byinput’s dtype. input(Tensor) – the input tensor. nan(Number,optional) – the value to replaceNaNs with. Default is zero. ",141,"[0, 1, 2, 3]"
3,3,What is the default value for negative infinity?,the least finite value,"ReplacesNaN, positive infinity, and negative infinity values in inputwith the values specified bynan,posinf, andneginf, respectively.
By default,NaN`sarereplacedwithzero,positiveinfinityisreplacedwiththegreatestfinitevaluerepresentableby:attr:`input’s dtype, and negative infinity
is replaced with the least finite value representable byinput’s dtype. input(Tensor) – the input tensor. nan(Number,optional) – the value to replaceNaNs with. Default is zero. ",141,"[0, 1, 2, 3]"
4,4,What is the value to replace positive infinity values with?,posinf,"nan(Number,optional) – the value to replaceNaNs with. Default is zero. posinf(Number,optional) – if a Number, the value to replace positive infinity values with.
If None, positive infinity values are replaced with the greatest finite value representable byinput’s dtype.
Default is None. neginf(Number,optional) – if a Number, the value to replace negative infinity values with.
If None, negative infinity values are replaced with the lowest finite value representable byinput’s dtype.
Default is None. ",295,"[4, 6]"
5,6,What is the value to replace negative infinity values with?,neginf,"nan(Number,optional) – the value to replaceNaNs with. Default is zero. posinf(Number,optional) – if a Number, the value to replace positive infinity values with.
If None, positive infinity values are replaced with the greatest finite value representable byinput’s dtype.
Default is None. neginf(Number,optional) – if a Number, the value to replace negative infinity values with.
If None, negative infinity values are replaced with the lowest finite value representable byinput’s dtype.
Default is None. ",295,"[4, 6]"
6,5,What is the greatest finite value represented by?,posinf,"input(Tensor) – the input tensor. nan(Number,optional) – the value to replaceNaNs with. Default is zero. posinf(Number,optional) – if a Number, the value to replace positive infinity values with.
If None, positive infinity values are replaced with the greatest finite value representable byinput’s dtype.
Default is None. ",288,[5]
7,7,What does Alias for torch.linalg.slogdet() do?,Performs a batch matrix-matrix product of matrices stored in input and mat2. Returns the matrix product of the NNN2-D tensors,"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
8,365,Returns the what solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization,LU,"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
9,367,Performs what of matrices stored in input and mat2?,a batch matrix-matrix product,"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
10,368,Computes the dot product for 1D tensors. Computes the eigenvalues and eigenvector,Alias of torch.outer(),"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
11,858,Computes the dot product for what?,1D tensors,"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
12,863,What is the name of the function that computes the dot product for 1D tensors?,Alias of torch.outer(),"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
13,866,What is a low-level function for calling LAPACK’s geqrf directly?,eigenvalues and eigenvectors of a real square matrix,"Performs a batch matrix-matrix product of matrices stored in input and mat2.   Returns the matrix product of the NNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu: returns matrix inv.   Solves a linear system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias of torch.outer().   Computes the dot product for 1D tensors.   Alias for torch.linalg.inv()   Alias for torch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias for torch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \times n)(m×n)and a matrixBBBof size(m×k)(m \times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias for torch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.   Computes the matrix exponential of a square matrix or of each square matrix in a batch.   Performs a matrix multiplication of the matricesinput and mat2.   Performs a matrix-vector product of the matrix inputand the vectorvec.   Alias for torch.linalg.householder_product().   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix.   Outer product of inputandvec2.   Alias for torch.linalg.pinv()   ",118,"[7, 365, 367, 368, 858, 863, 866]"
14,8,What does TORCH.DIV do?,Divides each element of the input input by the corresponding element of other.,"Divides each element of the input input by the corresponding element of other. Supports broadcasting to a common shape,type promotion, and integer, float, and complex inputs.
Always promotes integer types to the default scalar type. input(Tensor) – the dividend other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ",66,[8]
15,9,Always promotes integer types to what type?,default scalar type,"Supportsbroadcasting to a common shape,type promotion, and integer, float, and complex inputs.
Always promotes integer types to the default scalar type. input(Tensor) – the dividend other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ",212,[9]
16,10,Performs what type of rounding if both input and other are integer types?,no rounding,"Supports broadcasting to a common shape,type promotion, and integer, float, and complex inputs.
Always promotes integer types to the default scalar type. input(Tensor) – the dividend other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and otherare integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ",209,[10]
17,11,What is equivalent to NumPy's np.true_divide?,TORCH.DIV,"TORCH.DIV Supportsbroadcasting to a common shape,type promotion, and integer, float, and complex inputs.
Always promotes integer types to the default scalar type. input(Tensor) – the dividend other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ",214,[11]
18,12,What is the Python equivalent to floor division in Pytorch ?,TORCH.DIV,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
19,13,What type of integer division is trunc equivalent to?,C-style,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
20,15,What is equivalent to the /operator in Python and NumPy'snp.true_divide?,true division,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
21,16,What rounds the results of the division towards zero?,trunc,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
22,24,What type of rounding rounds the results of the division down?,floor,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
23,25,What does the // operator and NumPy'snp.floor_divide equivalent to?,floor division,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
24,26,What type of rounding does None perform?,no rounding,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
25,27,What type of division is equivalent to trunc?,C-style integer division,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
26,28,What is the name of the rounding that rounds the results of a division down?,floor,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
27,29,What is equivalent to floor division in Python?,NumPy’snp.floor_divide,"Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ""floor""- rounds the results of the division down.
Equivalent to floor division in Python (the //operator) and NumPy’snp.floor_divide. ",257,"[12, 13, 15, 16, 24, 25, 26, 27, 28, 29]"
28,14,What is the case when the inputs are promoted to the default scalar type?,if both input and other are integer types,"input(Tensor) – the dividend other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",286,[14]
29,17,What is equivalent to true division in Python?,C-style integer division,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
30,19,What is the Pytorch equivalent to TORCH.DIV to in Python?,true division,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
31,20,What is the default behavior of rounding in TORCH.DIV?,None,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
32,21,"Does rounding_mode(str,optional) perform any rounding?",no,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
33,22,"When does rounding_mode(str,optional) perform no rounding?",if both input and other are integer types,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
34,23,What is equivalent to the /operator in Python?,true division,"rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",318,"[17, 19, 20, 21, 22, 23]"
35,18,What happens if both input and otherare integer types?,Performs no rounding,"other(TensororNumber) – the divisor rounding_mode(str,optional) – Type of rounding applied to the result: None - default behavior. Performs no rounding and, if both input and other are integer types, promotes the inputs to the default scalar type.
Equivalent to true division in Python (the /operator) and NumPy’snp.true_divide. ""trunc""- rounds the results of the division towards zero.
Equivalent to C-style integer division. ",304,[18]
36,30,What is the name of Alias for torch.trunc?,torch.fix,What is the Alias for torch.trunc?,264,[30]
37,31,What does Alias for torch.le stand for?,TORCH.LESS_EQUAL, torch.le(). ,19,[31]
38,32,What creates a new tensor?,TORCH.COLUMN_STACK,"TORCH.COLUMN_STACK Creates a new tensor by horizontally stacking the tensors in tensors. Equivalent totorch.hstack(tensors), except each zero or one dimensional tensortin tensorsis first reshaped into a(t.numel(),1)column before being stacked horizontally. tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example: ",213,[32]
39,33,What is each zero or one dimensional tensortin tensors first reshaped into?,"a(t.numel(),1)column","Creates a new tensor by horizontally stacking the tensors in tensors. Equivalent totorch.hstack(tensors), except each zero or one dimensional tensortin tensorsis first reshaped into a(t.numel(),1)column before being stacked horizontally. tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example: ",57,"[33, 34]"
40,34,"What does tensors(sequence of Tensors) concatenate out(Tensor,optional",output tensor,"Creates a new tensor by horizontally stacking the tensors in tensors. Equivalent totorch.hstack(tensors), except each zero or one dimensional tensortin tensorsis first reshaped into a(t.numel(),1)column before being stacked horizontally. tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example: ",57,"[33, 34]"
41,35,What TORCH.IS_TENSOR does?,Returns True if obj is a PyTorch tensor.,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using thatisinstancecheck is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",145,"[35, 36, 37, 39, 40]"
42,36,What TORCH.IS_TENSOR return?,True,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using thatisinstancecheck is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",145,"[35, 36, 37, 39, 40]"
43,37,What is the function that returns true if obj is a PyTorch tensor?,TORCH.IS_TENSOR,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using thatisinstancecheck is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",145,"[35, 36, 37, 39, 40]"
44,39,What is the return value for if obj is a PyTorch tensor?,True,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using thatisinstancecheck is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",145,"[35, 36, 37, 39, 40]"
45,40,What is the function that returns True if obj is a PyTorch tensor?,"doingisinstance(obj,Tensor)","Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using thatisinstancecheck is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",145,"[35, 36, 37, 39, 40]"
46,38,What is better for typechecking with mypy?,isinstance,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using that isinstance check is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",144,"[38, 41]"
47,41,What is that isinstance check better for?,typechecking with mypy,"Returns True if obj is a PyTorch tensor. Note that this function is simply doingisinstance(obj,Tensor).
Using that isinstance check is better for typechecking with mypy,
and more explicit - so it’s recommended to use that instead ofis_tensor. obj(Object) – Object to test Example: ",144,"[38, 41]"
48,42,What does set_flush_denormal() do?,Disables denormal floating numbers on CPU,"Disables denormal floating numbers on CPU. ReturnsTrueif your system supports flushing denormal numbers and it
successfully configures flush denormal mode.set_flush_denormal()is only supported on x86 architectures supporting SSE3. mode(bool) – Controls whether to enable flush denormal mode or not Example: ",65,"[42, 43, 44, 45]"
49,43,On what architectures is set_flush_denormal() only supported?,x86 architectures,"Disables denormal floating numbers on CPU. ReturnsTrueif your system supports flushing denormal numbers and it
successfully configures flush denormal mode.set_flush_denormal()is only supported on x86 architectures supporting SSE3. mode(bool) – Controls whether to enable flush denormal mode or not Example: ",65,"[42, 43, 44, 45]"
